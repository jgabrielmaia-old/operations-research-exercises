# ci = cidade i
# dci = d(dCi) = distancia da cidade i para as demais cidades
# Para todo c com dci(dCi) <= 25, ci pertence a C, conjunto de cidades
# ci = 1 se cidade terá lojas, 0 caso não
# pj = população da cidade
# como queremos utilizar cidades mais populosas, 1/pj * ci é o objetivo
# restricoes = distancia entre cidades

var c1, binary;
var c2, binary;
var c3, binary;
var c4, binary;
var c5, binary;
var c6, binary;
var c7, binary;
var c8, binary;
var c9, binary;
var c10, binary;

minimize z: 1/10.000 * c1 + 1/15.000 * c2 + 1/28.000 * c3 + 1/30.000 * c4 + 1/40.000 * c5 + 1/30.000 * c6 + 1/20.000 * c7 + 1/15.000 * c8 + 1/60.000 * c9 + 1/12.000 * c10;

subject to c11: 20 * c2 + 17 * c5 + 24 * c6 + 12 * c10 >= 1;
subject to c12: 23 * c3 + 20 * c7 + 19 * c8 >= 1;
subject to c13: 22 * c6 + 21 * c9 >= 1;
subject to c14: 24 * c7 + 20 * c8 + 10 * c10 >= 1;
subject to c15: 17 * c1 + 23 * c6 + 13 * c9 >= 1;
subject to c16: 24 * c1 + 22 * c3 + 23 * c5 + 12 * c7 + 14 * c8 >= 1;
subject to c17: 20 * c2 + 24 * c4 + 12 * c6 >=1;
subject to c18: 19 * 2 + 20 * c4 + 14 * c6 + 20 * c9 >= 1;
subject to c19: 21 * c3 + 13 *c5 + 20 *c8 + 22 * c10 >= 1;
subject to c20: 12 * c1 + 10 * c4 + 22 * c9 >= 1;